	class @@ElementName@@ : public ElementImpl {
	public:
		void init(QRectF &, QList<QPointF> &, QList<StatLine> &,
											ElementTitleFactoryInterface &, QList<ElementTitleInterface*> &,
											SdfRendererInterface *, SdfRendererInterface *) {}

		void init(ElementTitleFactoryInterface &factory, QList<ElementTitleInterface*> &titles)
		{
@@EdgeInit@@
		}

		virtual ~ActivityEdge() {}

		void paint(QPainter *, QRectF &){}
		bool isNode() { return false; }
		bool isContainer() { return false; }
		bool isSortContainer() { return false; }
		int sizeOfForestalling() { return 0; }
		int sizeOfChildrenForestalling() { return 0; }
		bool isChildrenMovable() { return false; }
		bool isMinimizingToChildren() { return false; }
		bool isClass() { return false; }
		bool isMaximizingChildren() { return false; }
		bool isPort() { return false; }
		bool isHavePin() { return false; }
		QList<double> getBorders()
		{
			QList<double> list;
			list << 0 << 0 << 0 << 0;
			return list;
		}
		bool hasPorts() { return false; }
		Qt::PenStyle getPenStyle() { return @@EdgeStyle@@ }
		QStringList bonusContextMenuFields()
		{
			return QStringList();
		}

	protected: 
		virtual void drawStartArrow(QPainter * painter) const // not suported yet
		{
			QBrush old = painter->brush();
			QBrush brush;
			brush.setStyle(Qt::SolidPattern);
			brush.setColor(Qt::black);
			painter->setBrush(brush);
			static const QPointF points[] = {
				QPointF(0,0),
				QPointF(-5,10),
				QPointF(5,10)
			};
			painter->drawPolygon(points, 3);
			painter->setBrush(old);
		}

		virtual void drawEndArrow(QPainter * painter) const
		{
			QBrush old = painter->brush();
			QBrush brush;
			brush.setStyle(Qt::SolidPattern);
			brush.setColor(Qt::black);
			painter->setBrush(brush);
			static const QPointF points[] = {
				QPointF(0,0),
				QPointF(-5,10),
				QPointF(5,10)
			};
			painter->drawPolygon(points, 3);
			painter->setBrush(old);
		}

		void updateData(ElementRepoInterface *repo) const
		{
@@UpdateData@@		
		}

	private:
@@LabelDefinition@@	
	};
