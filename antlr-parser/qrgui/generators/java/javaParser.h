/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : D:\\Diploma\\ANTLR\\java.g
 *     -                            On : 2010-04-25 22:26:28
 *     -                for the parser : javaParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser javaParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pjavaParser, which is returned from a call to javaParserNew().
 *
 * The methods in pjavaParser are  as follows:
 *
 *  - void      pjavaParser->compilationUnit(pjavaParser)
 *  - void      pjavaParser->packageDeclaration(pjavaParser)
 *  - void      pjavaParser->importDeclaration(pjavaParser)
 *  - void      pjavaParser->typeDeclaration(pjavaParser)
 *  - void      pjavaParser->classOrInterfaceDeclaration(pjavaParser)
 *  - void      pjavaParser->classDeclaration(pjavaParser)
 *  - void      pjavaParser->normalClassDeclaration(pjavaParser)
 *  - void      pjavaParser->typeParameters(pjavaParser)
 *  - void      pjavaParser->typeParameter(pjavaParser)
 *  - void      pjavaParser->bound(pjavaParser)
 *  - void      pjavaParser->enumDeclaration(pjavaParser)
 *  - void      pjavaParser->enumBody(pjavaParser)
 *  - void      pjavaParser->enumConstants(pjavaParser)
 *  - void      pjavaParser->enumConstant(pjavaParser)
 *  - void      pjavaParser->enumBodyDeclarations(pjavaParser)
 *  - void      pjavaParser->interfaceDeclaration(pjavaParser)
 *  - void      pjavaParser->normalInterfaceDeclaration(pjavaParser)
 *  - void      pjavaParser->typeList(pjavaParser)
 *  - void      pjavaParser->classBody(pjavaParser)
 *  - void      pjavaParser->interfaceBody(pjavaParser)
 *  - void      pjavaParser->classBodyDeclaration(pjavaParser)
 *  - void      pjavaParser->memberDecl(pjavaParser)
 *  - void      pjavaParser->genericMethodOrConstructorDecl(pjavaParser)
 *  - void      pjavaParser->genericMethodOrConstructorRest(pjavaParser)
 *  - void      pjavaParser->methodDeclaration(pjavaParser)
 *  - void      pjavaParser->fieldDeclaration(pjavaParser)
 *  - void      pjavaParser->interfaceBodyDeclaration(pjavaParser)
 *  - void      pjavaParser->interfaceMemberDecl(pjavaParser)
 *  - void      pjavaParser->interfaceMethodOrFieldDecl(pjavaParser)
 *  - void      pjavaParser->interfaceMethodOrFieldRest(pjavaParser)
 *  - void      pjavaParser->methodDeclaratorRest(pjavaParser)
 *  - void      pjavaParser->voidMethodDeclaratorRest(pjavaParser)
 *  - void      pjavaParser->interfaceMethodDeclaratorRest(pjavaParser)
 *  - void      pjavaParser->interfaceGenericMethodDecl(pjavaParser)
 *  - void      pjavaParser->voidInterfaceMethodDeclaratorRest(pjavaParser)
 *  - void      pjavaParser->constructorDeclaratorRest(pjavaParser)
 *  - void      pjavaParser->constantDeclarator(pjavaParser)
 *  - void      pjavaParser->variableDeclarators(pjavaParser)
 *  - void      pjavaParser->variableDeclarator(pjavaParser)
 *  - void      pjavaParser->variableDeclaratorRest(pjavaParser)
 *  - void      pjavaParser->constantDeclaratorsRest(pjavaParser)
 *  - void      pjavaParser->constantDeclaratorRest(pjavaParser)
 *  - void      pjavaParser->variableDeclaratorId(pjavaParser)
 *  - void      pjavaParser->variableInitializer(pjavaParser)
 *  - void      pjavaParser->arrayInitializer(pjavaParser)
 *  - void      pjavaParser->modifier(pjavaParser)
 *  - void      pjavaParser->packageOrTypeName(pjavaParser)
 *  - void      pjavaParser->enumConstantName(pjavaParser)
 *  - void      pjavaParser->typeName(pjavaParser)
 *  - void      pjavaParser->type(pjavaParser)
 *  - void      pjavaParser->primitiveType(pjavaParser)
 *  - void      pjavaParser->variableModifier(pjavaParser)
 *  - void      pjavaParser->typeArguments(pjavaParser)
 *  - void      pjavaParser->typeArgument(pjavaParser)
 *  - void      pjavaParser->qualifiedNameList(pjavaParser)
 *  - void      pjavaParser->formalParameters(pjavaParser)
 *  - void      pjavaParser->formalParameterDecls(pjavaParser)
 *  - void      pjavaParser->formalParameterDeclsRest(pjavaParser)
 *  - void      pjavaParser->methodBody(pjavaParser)
 *  - void      pjavaParser->qualifiedName(pjavaParser)
 *  - void      pjavaParser->literal(pjavaParser)
 *  - void      pjavaParser->integerLiteral(pjavaParser)
 *  - void      pjavaParser->booleanLiteral(pjavaParser)
 *  - void      pjavaParser->annotations(pjavaParser)
 *  - void      pjavaParser->annotation(pjavaParser)
 *  - void      pjavaParser->annotationName(pjavaParser)
 *  - void      pjavaParser->elementValuePairs(pjavaParser)
 *  - void      pjavaParser->elementValuePair(pjavaParser)
 *  - void      pjavaParser->elementValue(pjavaParser)
 *  - void      pjavaParser->elementValueArrayInitializer(pjavaParser)
 *  - void      pjavaParser->annotationTypeDeclaration(pjavaParser)
 *  - void      pjavaParser->annotationTypeBody(pjavaParser)
 *  - void      pjavaParser->annotationTypeElementDeclarations(pjavaParser)
 *  - void      pjavaParser->annotationTypeElementDeclaration(pjavaParser)
 *  - void      pjavaParser->annotationTypeElementRest(pjavaParser)
 *  - void      pjavaParser->annotationMethodOrConstantRest(pjavaParser)
 *  - void      pjavaParser->annotationMethodRest(pjavaParser)
 *  - void      pjavaParser->annotationConstantRest(pjavaParser)
 *  - void      pjavaParser->defaultValue(pjavaParser)
 *  - void      pjavaParser->block(pjavaParser)
 *  - void      pjavaParser->blockStatement(pjavaParser)
 *  - void      pjavaParser->localVariableDeclaration(pjavaParser)
 *  - void      pjavaParser->statement(pjavaParser)
 *  - void      pjavaParser->catches(pjavaParser)
 *  - void      pjavaParser->catchClause(pjavaParser)
 *  - void      pjavaParser->formalParameter(pjavaParser)
 *  - void      pjavaParser->switchBlockStatementGroups(pjavaParser)
 *  - void      pjavaParser->switchBlockStatementGroup(pjavaParser)
 *  - void      pjavaParser->switchLabel(pjavaParser)
 *  - void      pjavaParser->moreStatementExpressions(pjavaParser)
 *  - void      pjavaParser->forControl(pjavaParser)
 *  - void      pjavaParser->forInit(pjavaParser)
 *  - void      pjavaParser->forVarControl(pjavaParser)
 *  - void      pjavaParser->forUpdate(pjavaParser)
 *  - void      pjavaParser->parExpression(pjavaParser)
 *  - void      pjavaParser->expressionList(pjavaParser)
 *  - void      pjavaParser->statementExpression(pjavaParser)
 *  - void      pjavaParser->constantExpression(pjavaParser)
 *  - void      pjavaParser->expression(pjavaParser)
 *  - void      pjavaParser->assignmentOperator(pjavaParser)
 *  - void      pjavaParser->conditionalExpression(pjavaParser)
 *  - void      pjavaParser->conditionalOrExpression(pjavaParser)
 *  - void      pjavaParser->conditionalAndExpression(pjavaParser)
 *  - void      pjavaParser->inclusiveOrExpression(pjavaParser)
 *  - void      pjavaParser->exclusiveOrExpression(pjavaParser)
 *  - void      pjavaParser->andExpression(pjavaParser)
 *  - void      pjavaParser->equalityExpression(pjavaParser)
 *  - void      pjavaParser->instanceOfExpression(pjavaParser)
 *  - void      pjavaParser->relationalExpression(pjavaParser)
 *  - void      pjavaParser->relationalOp(pjavaParser)
 *  - void      pjavaParser->shiftExpression(pjavaParser)
 *  - void      pjavaParser->shiftOp(pjavaParser)
 *  - void      pjavaParser->additiveExpression(pjavaParser)
 *  - void      pjavaParser->multiplicativeExpression(pjavaParser)
 *  - void      pjavaParser->unaryExpression(pjavaParser)
 *  - void      pjavaParser->unaryExpressionNotPlusMinus(pjavaParser)
 *  - void      pjavaParser->castExpression(pjavaParser)
 *  - void      pjavaParser->primary(pjavaParser)
 *  - void      pjavaParser->identifierSuffix(pjavaParser)
 *  - void      pjavaParser->creator(pjavaParser)
 *  - void      pjavaParser->createdName(pjavaParser)
 *  - void      pjavaParser->innerCreator(pjavaParser)
 *  - void      pjavaParser->arrayCreatorRest(pjavaParser)
 *  - void      pjavaParser->classCreatorRest(pjavaParser)
 *  - void      pjavaParser->explicitGenericInvocation(pjavaParser)
 *  - void      pjavaParser->nonWildcardTypeArguments(pjavaParser)
 *  - void      pjavaParser->explicitGenericInvocationSuffix(pjavaParser)
 *  - void      pjavaParser->selector(pjavaParser)
 *  - void      pjavaParser->superSuffix(pjavaParser)
 *  - void      pjavaParser->arguments(pjavaParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_javaParser_H
#define _javaParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct javaParser_Ctx_struct javaParser, * pjavaParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

/** Context tracking structure for javaParser
 */
struct javaParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     void (*compilationUnit)	(struct javaParser_Ctx_struct * ctx);
     void (*packageDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*importDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*typeDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*classOrInterfaceDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*classDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*normalClassDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*typeParameters)	(struct javaParser_Ctx_struct * ctx);
     void (*typeParameter)	(struct javaParser_Ctx_struct * ctx);
     void (*bound)	(struct javaParser_Ctx_struct * ctx);
     void (*enumDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*enumBody)	(struct javaParser_Ctx_struct * ctx);
     void (*enumConstants)	(struct javaParser_Ctx_struct * ctx);
     void (*enumConstant)	(struct javaParser_Ctx_struct * ctx);
     void (*enumBodyDeclarations)	(struct javaParser_Ctx_struct * ctx);
     void (*interfaceDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*normalInterfaceDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*typeList)	(struct javaParser_Ctx_struct * ctx);
     void (*classBody)	(struct javaParser_Ctx_struct * ctx);
     void (*interfaceBody)	(struct javaParser_Ctx_struct * ctx);
     void (*classBodyDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*memberDecl)	(struct javaParser_Ctx_struct * ctx);
     void (*genericMethodOrConstructorDecl)	(struct javaParser_Ctx_struct * ctx);
     void (*genericMethodOrConstructorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*methodDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*fieldDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*interfaceBodyDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*interfaceMemberDecl)	(struct javaParser_Ctx_struct * ctx);
     void (*interfaceMethodOrFieldDecl)	(struct javaParser_Ctx_struct * ctx);
     void (*interfaceMethodOrFieldRest)	(struct javaParser_Ctx_struct * ctx);
     void (*methodDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*voidMethodDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*interfaceMethodDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*interfaceGenericMethodDecl)	(struct javaParser_Ctx_struct * ctx);
     void (*voidInterfaceMethodDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*constructorDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*constantDeclarator)	(struct javaParser_Ctx_struct * ctx);
     void (*variableDeclarators)	(struct javaParser_Ctx_struct * ctx);
     void (*variableDeclarator)	(struct javaParser_Ctx_struct * ctx);
     void (*variableDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*constantDeclaratorsRest)	(struct javaParser_Ctx_struct * ctx);
     void (*constantDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*variableDeclaratorId)	(struct javaParser_Ctx_struct * ctx);
     void (*variableInitializer)	(struct javaParser_Ctx_struct * ctx);
     void (*arrayInitializer)	(struct javaParser_Ctx_struct * ctx);
     void (*modifier)	(struct javaParser_Ctx_struct * ctx);
     void (*packageOrTypeName)	(struct javaParser_Ctx_struct * ctx);
     void (*enumConstantName)	(struct javaParser_Ctx_struct * ctx);
     void (*typeName)	(struct javaParser_Ctx_struct * ctx);
     void (*type)	(struct javaParser_Ctx_struct * ctx);
     void (*primitiveType)	(struct javaParser_Ctx_struct * ctx);
     void (*variableModifier)	(struct javaParser_Ctx_struct * ctx);
     void (*typeArguments)	(struct javaParser_Ctx_struct * ctx);
     void (*typeArgument)	(struct javaParser_Ctx_struct * ctx);
     void (*qualifiedNameList)	(struct javaParser_Ctx_struct * ctx);
     void (*formalParameters)	(struct javaParser_Ctx_struct * ctx);
     void (*formalParameterDecls)	(struct javaParser_Ctx_struct * ctx);
     void (*formalParameterDeclsRest)	(struct javaParser_Ctx_struct * ctx);
     void (*methodBody)	(struct javaParser_Ctx_struct * ctx);
     void (*qualifiedName)	(struct javaParser_Ctx_struct * ctx);
     void (*literal)	(struct javaParser_Ctx_struct * ctx);
     void (*integerLiteral)	(struct javaParser_Ctx_struct * ctx);
     void (*booleanLiteral)	(struct javaParser_Ctx_struct * ctx);
     void (*annotations)	(struct javaParser_Ctx_struct * ctx);
     void (*annotation)	(struct javaParser_Ctx_struct * ctx);
     void (*annotationName)	(struct javaParser_Ctx_struct * ctx);
     void (*elementValuePairs)	(struct javaParser_Ctx_struct * ctx);
     void (*elementValuePair)	(struct javaParser_Ctx_struct * ctx);
     void (*elementValue)	(struct javaParser_Ctx_struct * ctx);
     void (*elementValueArrayInitializer)	(struct javaParser_Ctx_struct * ctx);
     void (*annotationTypeDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*annotationTypeBody)	(struct javaParser_Ctx_struct * ctx);
     void (*annotationTypeElementDeclarations)	(struct javaParser_Ctx_struct * ctx);
     void (*annotationTypeElementDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*annotationTypeElementRest)	(struct javaParser_Ctx_struct * ctx);
     void (*annotationMethodOrConstantRest)	(struct javaParser_Ctx_struct * ctx);
     void (*annotationMethodRest)	(struct javaParser_Ctx_struct * ctx);
     void (*annotationConstantRest)	(struct javaParser_Ctx_struct * ctx);
     void (*defaultValue)	(struct javaParser_Ctx_struct * ctx);
     void (*block)	(struct javaParser_Ctx_struct * ctx);
     void (*blockStatement)	(struct javaParser_Ctx_struct * ctx);
     void (*localVariableDeclaration)	(struct javaParser_Ctx_struct * ctx);
     void (*statement)	(struct javaParser_Ctx_struct * ctx);
     void (*catches)	(struct javaParser_Ctx_struct * ctx);
     void (*catchClause)	(struct javaParser_Ctx_struct * ctx);
     void (*formalParameter)	(struct javaParser_Ctx_struct * ctx);
     void (*switchBlockStatementGroups)	(struct javaParser_Ctx_struct * ctx);
     void (*switchBlockStatementGroup)	(struct javaParser_Ctx_struct * ctx);
     void (*switchLabel)	(struct javaParser_Ctx_struct * ctx);
     void (*moreStatementExpressions)	(struct javaParser_Ctx_struct * ctx);
     void (*forControl)	(struct javaParser_Ctx_struct * ctx);
     void (*forInit)	(struct javaParser_Ctx_struct * ctx);
     void (*forVarControl)	(struct javaParser_Ctx_struct * ctx);
     void (*forUpdate)	(struct javaParser_Ctx_struct * ctx);
     void (*parExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*expressionList)	(struct javaParser_Ctx_struct * ctx);
     void (*statementExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*constantExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*expression)	(struct javaParser_Ctx_struct * ctx);
     void (*assignmentOperator)	(struct javaParser_Ctx_struct * ctx);
     void (*conditionalExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*conditionalOrExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*conditionalAndExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*inclusiveOrExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*exclusiveOrExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*andExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*equalityExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*instanceOfExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*relationalExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*relationalOp)	(struct javaParser_Ctx_struct * ctx);
     void (*shiftExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*shiftOp)	(struct javaParser_Ctx_struct * ctx);
     void (*additiveExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*multiplicativeExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*unaryExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*unaryExpressionNotPlusMinus)	(struct javaParser_Ctx_struct * ctx);
     void (*castExpression)	(struct javaParser_Ctx_struct * ctx);
     void (*primary)	(struct javaParser_Ctx_struct * ctx);
     void (*identifierSuffix)	(struct javaParser_Ctx_struct * ctx);
     void (*creator)	(struct javaParser_Ctx_struct * ctx);
     void (*createdName)	(struct javaParser_Ctx_struct * ctx);
     void (*innerCreator)	(struct javaParser_Ctx_struct * ctx);
     void (*arrayCreatorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*classCreatorRest)	(struct javaParser_Ctx_struct * ctx);
     void (*explicitGenericInvocation)	(struct javaParser_Ctx_struct * ctx);
     void (*nonWildcardTypeArguments)	(struct javaParser_Ctx_struct * ctx);
     void (*explicitGenericInvocationSuffix)	(struct javaParser_Ctx_struct * ctx);
     void (*selector)	(struct javaParser_Ctx_struct * ctx);
     void (*superSuffix)	(struct javaParser_Ctx_struct * ctx);
     void (*arguments)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred38_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred39_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred85_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred120_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred135_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred137_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred139_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred144_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred145_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred155_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred156_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred173_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred174_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred176_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred181_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred184_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred195_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred205_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred209_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred211_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred223_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred227_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred228_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred232_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred233_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred238_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred239_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred245_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred261_java)	(struct javaParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct javaParser_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pjavaParser javaParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pjavaParser javaParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__29      29
#define T__28      28
#define T__27      27
#define T__26      26
#define FloatTypeSuffix      15
#define T__25      25
#define OctalLiteral      10
#define T__24      24
#define EOF      -1
#define Identifier      4
#define T__93      93
#define T__94      94
#define T__91      91
#define T__92      92
#define T__90      90
#define COMMENT      22
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define LINE_COMMENT      23
#define IntegerTypeSuffix      13
#define T__85      85
#define T__84      84
#define T__87      87
#define T__86      86
#define T__89      89
#define T__88      88
#define WS      21
#define T__71      71
#define T__72      72
#define T__70      70
#define FloatingPointLiteral      6
#define JavaIDDigit      20
#define T__76      76
#define T__75      75
#define T__74      74
#define Letter      19
#define EscapeSequence      16
#define T__73      73
#define T__79      79
#define T__78      78
#define T__77      77
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define T__65      65
#define T__62      62
#define T__63      63
#define CharacterLiteral      7
#define Exponent      14
#define T__61      61
#define T__60      60
#define HexDigit      12
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__107      107
#define T__108      108
#define T__109      109
#define T__59      59
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__111      111
#define T__110      110
#define T__113      113
#define T__112      112
#define T__50      50
#define T__42      42
#define HexLiteral      9
#define T__43      43
#define T__40      40
#define T__41      41
#define T__46      46
#define T__47      47
#define T__44      44
#define T__45      45
#define T__48      48
#define T__49      49
#define T__102      102
#define T__101      101
#define T__100      100
#define DecimalLiteral      11
#define StringLiteral      8
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define ENUM      5
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define UnicodeEscape      17
#define OctalEscape      18
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for javaParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
