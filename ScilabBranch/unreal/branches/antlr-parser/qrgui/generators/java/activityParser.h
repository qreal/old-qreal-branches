/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : D:\\LeftDocs\\temp\\qrgui\\generators\\java\\activity.g
 *     -                            On : 2010-05-13 16:34:27
 *     -                for the parser : activityParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser activityParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pactivityParser, which is returned from a call to activityParserNew().
 *
 * The methods in pactivityParser are  as follows:
 *
 *  - activityParser_compilationUnit_return      pactivityParser->compilationUnit(pactivityParser)
 *  - activityParser_blockStatement_return      pactivityParser->blockStatement(pactivityParser)
 *  - activityParser_localVariableDeclaration_return      pactivityParser->localVariableDeclaration(pactivityParser)
 *  - activityParser_statement_return      pactivityParser->statement(pactivityParser)
 *  - activityParser_block_return      pactivityParser->block(pactivityParser)
 *  - activityParser_catches_return      pactivityParser->catches(pactivityParser)
 *  - activityParser_catchClause_return      pactivityParser->catchClause(pactivityParser)
 *  - activityParser_formalParameter_return      pactivityParser->formalParameter(pactivityParser)
 *  - activityParser_switchBlockStatementGroups_return      pactivityParser->switchBlockStatementGroups(pactivityParser)
 *  - activityParser_switchBlockStatementGroup_return      pactivityParser->switchBlockStatementGroup(pactivityParser)
 *  - activityParser_switchLabel_return      pactivityParser->switchLabel(pactivityParser)
 *  - activityParser_moreStatementExpressions_return      pactivityParser->moreStatementExpressions(pactivityParser)
 *  - activityParser_forControl_return      pactivityParser->forControl(pactivityParser)
 *  - activityParser_forInit_return      pactivityParser->forInit(pactivityParser)
 *  - activityParser_forVarControl_return      pactivityParser->forVarControl(pactivityParser)
 *  - activityParser_forUpdate_return      pactivityParser->forUpdate(pactivityParser)
 *  - activityParser_typeDeclaration_return      pactivityParser->typeDeclaration(pactivityParser)
 *  - activityParser_classOrInterfaceDeclaration_return      pactivityParser->classOrInterfaceDeclaration(pactivityParser)
 *  - activityParser_classDeclaration_return      pactivityParser->classDeclaration(pactivityParser)
 *  - activityParser_normalClassDeclaration_return      pactivityParser->normalClassDeclaration(pactivityParser)
 *  - activityParser_typeParameters_return      pactivityParser->typeParameters(pactivityParser)
 *  - activityParser_typeParameter_return      pactivityParser->typeParameter(pactivityParser)
 *  - activityParser_bound_return      pactivityParser->bound(pactivityParser)
 *  - activityParser_enumDeclaration_return      pactivityParser->enumDeclaration(pactivityParser)
 *  - activityParser_enumBody_return      pactivityParser->enumBody(pactivityParser)
 *  - activityParser_enumConstants_return      pactivityParser->enumConstants(pactivityParser)
 *  - activityParser_enumConstant_return      pactivityParser->enumConstant(pactivityParser)
 *  - activityParser_enumBodyDeclarations_return      pactivityParser->enumBodyDeclarations(pactivityParser)
 *  - activityParser_interfaceDeclaration_return      pactivityParser->interfaceDeclaration(pactivityParser)
 *  - activityParser_normalInterfaceDeclaration_return      pactivityParser->normalInterfaceDeclaration(pactivityParser)
 *  - activityParser_typeList_return      pactivityParser->typeList(pactivityParser)
 *  - activityParser_classBody_return      pactivityParser->classBody(pactivityParser)
 *  - activityParser_interfaceBody_return      pactivityParser->interfaceBody(pactivityParser)
 *  - activityParser_classBodyDeclaration_return      pactivityParser->classBodyDeclaration(pactivityParser)
 *  - activityParser_memberDecl_return      pactivityParser->memberDecl(pactivityParser)
 *  - activityParser_genericMethodOrConstructorDecl_return      pactivityParser->genericMethodOrConstructorDecl(pactivityParser)
 *  - activityParser_genericMethodOrConstructorRest_return      pactivityParser->genericMethodOrConstructorRest(pactivityParser)
 *  - activityParser_methodDeclaration_return      pactivityParser->methodDeclaration(pactivityParser)
 *  - activityParser_fieldDeclaration_return      pactivityParser->fieldDeclaration(pactivityParser)
 *  - activityParser_interfaceBodyDeclaration_return      pactivityParser->interfaceBodyDeclaration(pactivityParser)
 *  - activityParser_interfaceMemberDecl_return      pactivityParser->interfaceMemberDecl(pactivityParser)
 *  - activityParser_interfaceMethodOrFieldDecl_return      pactivityParser->interfaceMethodOrFieldDecl(pactivityParser)
 *  - activityParser_interfaceMethodOrFieldRest_return      pactivityParser->interfaceMethodOrFieldRest(pactivityParser)
 *  - activityParser_methodDeclaratorRest_return      pactivityParser->methodDeclaratorRest(pactivityParser)
 *  - activityParser_voidMethodDeclaratorRest_return      pactivityParser->voidMethodDeclaratorRest(pactivityParser)
 *  - activityParser_interfaceMethodDeclaratorRest_return      pactivityParser->interfaceMethodDeclaratorRest(pactivityParser)
 *  - activityParser_interfaceGenericMethodDecl_return      pactivityParser->interfaceGenericMethodDecl(pactivityParser)
 *  - activityParser_voidInterfaceMethodDeclaratorRest_return      pactivityParser->voidInterfaceMethodDeclaratorRest(pactivityParser)
 *  - activityParser_constructorDeclaratorRest_return      pactivityParser->constructorDeclaratorRest(pactivityParser)
 *  - activityParser_constantDeclarator_return      pactivityParser->constantDeclarator(pactivityParser)
 *  - activityParser_variableDeclarators_return      pactivityParser->variableDeclarators(pactivityParser)
 *  - activityParser_variableDeclarator_return      pactivityParser->variableDeclarator(pactivityParser)
 *  - activityParser_variableDeclaratorRest_return      pactivityParser->variableDeclaratorRest(pactivityParser)
 *  - activityParser_constantDeclaratorsRest_return      pactivityParser->constantDeclaratorsRest(pactivityParser)
 *  - activityParser_constantDeclaratorRest_return      pactivityParser->constantDeclaratorRest(pactivityParser)
 *  - activityParser_variableDeclaratorId_return      pactivityParser->variableDeclaratorId(pactivityParser)
 *  - activityParser_variableInitializer_return      pactivityParser->variableInitializer(pactivityParser)
 *  - activityParser_arrayInitializer_return      pactivityParser->arrayInitializer(pactivityParser)
 *  - activityParser_modifier_return      pactivityParser->modifier(pactivityParser)
 *  - activityParser_packageOrTypeName_return      pactivityParser->packageOrTypeName(pactivityParser)
 *  - activityParser_enumConstantName_return      pactivityParser->enumConstantName(pactivityParser)
 *  - activityParser_typeName_return      pactivityParser->typeName(pactivityParser)
 *  - activityParser_type_return      pactivityParser->type(pactivityParser)
 *  - activityParser_primitiveType_return      pactivityParser->primitiveType(pactivityParser)
 *  - activityParser_variableModifier_return      pactivityParser->variableModifier(pactivityParser)
 *  - activityParser_typeArguments_return      pactivityParser->typeArguments(pactivityParser)
 *  - activityParser_typeArgument_return      pactivityParser->typeArgument(pactivityParser)
 *  - activityParser_qualifiedNameList_return      pactivityParser->qualifiedNameList(pactivityParser)
 *  - activityParser_formalParameters_return      pactivityParser->formalParameters(pactivityParser)
 *  - activityParser_formalParameterDecls_return      pactivityParser->formalParameterDecls(pactivityParser)
 *  - activityParser_formalParameterDeclsRest_return      pactivityParser->formalParameterDeclsRest(pactivityParser)
 *  - activityParser_methodBody_return      pactivityParser->methodBody(pactivityParser)
 *  - activityParser_qualifiedName_return      pactivityParser->qualifiedName(pactivityParser)
 *  - activityParser_literal_return      pactivityParser->literal(pactivityParser)
 *  - activityParser_integerLiteral_return      pactivityParser->integerLiteral(pactivityParser)
 *  - activityParser_booleanLiteral_return      pactivityParser->booleanLiteral(pactivityParser)
 *  - activityParser_annotations_return      pactivityParser->annotations(pactivityParser)
 *  - activityParser_annotation_return      pactivityParser->annotation(pactivityParser)
 *  - activityParser_annotationName_return      pactivityParser->annotationName(pactivityParser)
 *  - activityParser_elementValuePairs_return      pactivityParser->elementValuePairs(pactivityParser)
 *  - activityParser_elementValuePair_return      pactivityParser->elementValuePair(pactivityParser)
 *  - activityParser_elementValue_return      pactivityParser->elementValue(pactivityParser)
 *  - activityParser_elementValueArrayInitializer_return      pactivityParser->elementValueArrayInitializer(pactivityParser)
 *  - activityParser_annotationTypeDeclaration_return      pactivityParser->annotationTypeDeclaration(pactivityParser)
 *  - activityParser_annotationTypeBody_return      pactivityParser->annotationTypeBody(pactivityParser)
 *  - activityParser_annotationTypeElementDeclarations_return      pactivityParser->annotationTypeElementDeclarations(pactivityParser)
 *  - activityParser_annotationTypeElementDeclaration_return      pactivityParser->annotationTypeElementDeclaration(pactivityParser)
 *  - activityParser_annotationTypeElementRest_return      pactivityParser->annotationTypeElementRest(pactivityParser)
 *  - activityParser_annotationMethodOrConstantRest_return      pactivityParser->annotationMethodOrConstantRest(pactivityParser)
 *  - activityParser_annotationMethodRest_return      pactivityParser->annotationMethodRest(pactivityParser)
 *  - activityParser_annotationConstantRest_return      pactivityParser->annotationConstantRest(pactivityParser)
 *  - activityParser_defaultValue_return      pactivityParser->defaultValue(pactivityParser)
 *  - activityParser_parExpression_return      pactivityParser->parExpression(pactivityParser)
 *  - activityParser_expressionList_return      pactivityParser->expressionList(pactivityParser)
 *  - activityParser_statementExpression_return      pactivityParser->statementExpression(pactivityParser)
 *  - activityParser_constantExpression_return      pactivityParser->constantExpression(pactivityParser)
 *  - activityParser_expression_return      pactivityParser->expression(pactivityParser)
 *  - activityParser_assignmentOperator_return      pactivityParser->assignmentOperator(pactivityParser)
 *  - activityParser_conditionalExpression_return      pactivityParser->conditionalExpression(pactivityParser)
 *  - activityParser_conditionalOrExpression_return      pactivityParser->conditionalOrExpression(pactivityParser)
 *  - activityParser_conditionalAndExpression_return      pactivityParser->conditionalAndExpression(pactivityParser)
 *  - activityParser_inclusiveOrExpression_return      pactivityParser->inclusiveOrExpression(pactivityParser)
 *  - activityParser_exclusiveOrExpression_return      pactivityParser->exclusiveOrExpression(pactivityParser)
 *  - activityParser_andExpression_return      pactivityParser->andExpression(pactivityParser)
 *  - activityParser_equalityExpression_return      pactivityParser->equalityExpression(pactivityParser)
 *  - activityParser_instanceOfExpression_return      pactivityParser->instanceOfExpression(pactivityParser)
 *  - activityParser_relationalExpression_return      pactivityParser->relationalExpression(pactivityParser)
 *  - activityParser_relationalOp_return      pactivityParser->relationalOp(pactivityParser)
 *  - activityParser_shiftExpression_return      pactivityParser->shiftExpression(pactivityParser)
 *  - activityParser_shiftOp_return      pactivityParser->shiftOp(pactivityParser)
 *  - activityParser_additiveExpression_return      pactivityParser->additiveExpression(pactivityParser)
 *  - activityParser_multiplicativeExpression_return      pactivityParser->multiplicativeExpression(pactivityParser)
 *  - activityParser_unaryExpression_return      pactivityParser->unaryExpression(pactivityParser)
 *  - activityParser_unaryExpressionNotPlusMinus_return      pactivityParser->unaryExpressionNotPlusMinus(pactivityParser)
 *  - activityParser_castExpression_return      pactivityParser->castExpression(pactivityParser)
 *  - activityParser_primary_return      pactivityParser->primary(pactivityParser)
 *  - activityParser_identifierSuffix_return      pactivityParser->identifierSuffix(pactivityParser)
 *  - activityParser_creator_return      pactivityParser->creator(pactivityParser)
 *  - activityParser_createdName_return      pactivityParser->createdName(pactivityParser)
 *  - activityParser_innerCreator_return      pactivityParser->innerCreator(pactivityParser)
 *  - activityParser_arrayCreatorRest_return      pactivityParser->arrayCreatorRest(pactivityParser)
 *  - activityParser_classCreatorRest_return      pactivityParser->classCreatorRest(pactivityParser)
 *  - activityParser_explicitGenericInvocation_return      pactivityParser->explicitGenericInvocation(pactivityParser)
 *  - activityParser_nonWildcardTypeArguments_return      pactivityParser->nonWildcardTypeArguments(pactivityParser)
 *  - activityParser_explicitGenericInvocationSuffix_return      pactivityParser->explicitGenericInvocationSuffix(pactivityParser)
 *  - activityParser_selector_return      pactivityParser->selector(pactivityParser)
 *  - activityParser_superSuffix_return      pactivityParser->superSuffix(pactivityParser)
 *  - activityParser_arguments_return      pactivityParser->arguments(pactivityParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_activityParser_H
#define _activityParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct activityParser_Ctx_struct activityParser, * pactivityParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct activityParser_compilationUnit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_compilationUnit_return;

typedef struct activityParser_blockStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_blockStatement_return;

typedef struct activityParser_localVariableDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_localVariableDeclaration_return;

typedef struct activityParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_statement_return;

typedef struct activityParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_block_return;

typedef struct activityParser_catches_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_catches_return;

typedef struct activityParser_catchClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_catchClause_return;

typedef struct activityParser_formalParameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_formalParameter_return;

typedef struct activityParser_switchBlockStatementGroups_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_switchBlockStatementGroups_return;

typedef struct activityParser_switchBlockStatementGroup_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_switchBlockStatementGroup_return;

typedef struct activityParser_switchLabel_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_switchLabel_return;

typedef struct activityParser_moreStatementExpressions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_moreStatementExpressions_return;

typedef struct activityParser_forControl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_forControl_return;

typedef struct activityParser_forInit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_forInit_return;

typedef struct activityParser_forVarControl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_forVarControl_return;

typedef struct activityParser_forUpdate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_forUpdate_return;

typedef struct activityParser_typeDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_typeDeclaration_return;

typedef struct activityParser_classOrInterfaceDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_classOrInterfaceDeclaration_return;

typedef struct activityParser_classDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_classDeclaration_return;

typedef struct activityParser_normalClassDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_normalClassDeclaration_return;

typedef struct activityParser_typeParameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_typeParameters_return;

typedef struct activityParser_typeParameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_typeParameter_return;

typedef struct activityParser_bound_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_bound_return;

typedef struct activityParser_enumDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_enumDeclaration_return;

typedef struct activityParser_enumBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_enumBody_return;

typedef struct activityParser_enumConstants_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_enumConstants_return;

typedef struct activityParser_enumConstant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_enumConstant_return;

typedef struct activityParser_enumBodyDeclarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_enumBodyDeclarations_return;

typedef struct activityParser_interfaceDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_interfaceDeclaration_return;

typedef struct activityParser_normalInterfaceDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_normalInterfaceDeclaration_return;

typedef struct activityParser_typeList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_typeList_return;

typedef struct activityParser_classBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_classBody_return;

typedef struct activityParser_interfaceBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_interfaceBody_return;

typedef struct activityParser_classBodyDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_classBodyDeclaration_return;

typedef struct activityParser_memberDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_memberDecl_return;

typedef struct activityParser_genericMethodOrConstructorDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_genericMethodOrConstructorDecl_return;

typedef struct activityParser_genericMethodOrConstructorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_genericMethodOrConstructorRest_return;

typedef struct activityParser_methodDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_methodDeclaration_return;

typedef struct activityParser_fieldDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_fieldDeclaration_return;

typedef struct activityParser_interfaceBodyDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_interfaceBodyDeclaration_return;

typedef struct activityParser_interfaceMemberDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_interfaceMemberDecl_return;

typedef struct activityParser_interfaceMethodOrFieldDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_interfaceMethodOrFieldDecl_return;

typedef struct activityParser_interfaceMethodOrFieldRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_interfaceMethodOrFieldRest_return;

typedef struct activityParser_methodDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_methodDeclaratorRest_return;

typedef struct activityParser_voidMethodDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_voidMethodDeclaratorRest_return;

typedef struct activityParser_interfaceMethodDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_interfaceMethodDeclaratorRest_return;

typedef struct activityParser_interfaceGenericMethodDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_interfaceGenericMethodDecl_return;

typedef struct activityParser_voidInterfaceMethodDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_voidInterfaceMethodDeclaratorRest_return;

typedef struct activityParser_constructorDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_constructorDeclaratorRest_return;

typedef struct activityParser_constantDeclarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_constantDeclarator_return;

typedef struct activityParser_variableDeclarators_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_variableDeclarators_return;

typedef struct activityParser_variableDeclarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_variableDeclarator_return;

typedef struct activityParser_variableDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_variableDeclaratorRest_return;

typedef struct activityParser_constantDeclaratorsRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_constantDeclaratorsRest_return;

typedef struct activityParser_constantDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_constantDeclaratorRest_return;

typedef struct activityParser_variableDeclaratorId_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_variableDeclaratorId_return;

typedef struct activityParser_variableInitializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_variableInitializer_return;

typedef struct activityParser_arrayInitializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_arrayInitializer_return;

typedef struct activityParser_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_modifier_return;

typedef struct activityParser_packageOrTypeName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_packageOrTypeName_return;

typedef struct activityParser_enumConstantName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_enumConstantName_return;

typedef struct activityParser_typeName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_typeName_return;

typedef struct activityParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_type_return;

typedef struct activityParser_primitiveType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_primitiveType_return;

typedef struct activityParser_variableModifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_variableModifier_return;

typedef struct activityParser_typeArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_typeArguments_return;

typedef struct activityParser_typeArgument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_typeArgument_return;

typedef struct activityParser_qualifiedNameList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_qualifiedNameList_return;

typedef struct activityParser_formalParameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_formalParameters_return;

typedef struct activityParser_formalParameterDecls_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_formalParameterDecls_return;

typedef struct activityParser_formalParameterDeclsRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_formalParameterDeclsRest_return;

typedef struct activityParser_methodBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_methodBody_return;

typedef struct activityParser_qualifiedName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_qualifiedName_return;

typedef struct activityParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_literal_return;

typedef struct activityParser_integerLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_integerLiteral_return;

typedef struct activityParser_booleanLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_booleanLiteral_return;

typedef struct activityParser_annotations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotations_return;

typedef struct activityParser_annotation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotation_return;

typedef struct activityParser_annotationName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotationName_return;

typedef struct activityParser_elementValuePairs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_elementValuePairs_return;

typedef struct activityParser_elementValuePair_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_elementValuePair_return;

typedef struct activityParser_elementValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_elementValue_return;

typedef struct activityParser_elementValueArrayInitializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_elementValueArrayInitializer_return;

typedef struct activityParser_annotationTypeDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotationTypeDeclaration_return;

typedef struct activityParser_annotationTypeBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotationTypeBody_return;

typedef struct activityParser_annotationTypeElementDeclarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotationTypeElementDeclarations_return;

typedef struct activityParser_annotationTypeElementDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotationTypeElementDeclaration_return;

typedef struct activityParser_annotationTypeElementRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotationTypeElementRest_return;

typedef struct activityParser_annotationMethodOrConstantRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotationMethodOrConstantRest_return;

typedef struct activityParser_annotationMethodRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotationMethodRest_return;

typedef struct activityParser_annotationConstantRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_annotationConstantRest_return;

typedef struct activityParser_defaultValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_defaultValue_return;

typedef struct activityParser_parExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_parExpression_return;

typedef struct activityParser_expressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_expressionList_return;

typedef struct activityParser_statementExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_statementExpression_return;

typedef struct activityParser_constantExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_constantExpression_return;

typedef struct activityParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_expression_return;

typedef struct activityParser_assignmentOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_assignmentOperator_return;

typedef struct activityParser_conditionalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_conditionalExpression_return;

typedef struct activityParser_conditionalOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_conditionalOrExpression_return;

typedef struct activityParser_conditionalAndExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_conditionalAndExpression_return;

typedef struct activityParser_inclusiveOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_inclusiveOrExpression_return;

typedef struct activityParser_exclusiveOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_exclusiveOrExpression_return;

typedef struct activityParser_andExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_andExpression_return;

typedef struct activityParser_equalityExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_equalityExpression_return;

typedef struct activityParser_instanceOfExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_instanceOfExpression_return;

typedef struct activityParser_relationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_relationalExpression_return;

typedef struct activityParser_relationalOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_relationalOp_return;

typedef struct activityParser_shiftExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_shiftExpression_return;

typedef struct activityParser_shiftOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_shiftOp_return;

typedef struct activityParser_additiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_additiveExpression_return;

typedef struct activityParser_multiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_multiplicativeExpression_return;

typedef struct activityParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_unaryExpression_return;

typedef struct activityParser_unaryExpressionNotPlusMinus_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_unaryExpressionNotPlusMinus_return;

typedef struct activityParser_castExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_castExpression_return;

typedef struct activityParser_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_primary_return;

typedef struct activityParser_identifierSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_identifierSuffix_return;

typedef struct activityParser_creator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_creator_return;

typedef struct activityParser_createdName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_createdName_return;

typedef struct activityParser_innerCreator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_innerCreator_return;

typedef struct activityParser_arrayCreatorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_arrayCreatorRest_return;

typedef struct activityParser_classCreatorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_classCreatorRest_return;

typedef struct activityParser_explicitGenericInvocation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_explicitGenericInvocation_return;

typedef struct activityParser_nonWildcardTypeArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_nonWildcardTypeArguments_return;

typedef struct activityParser_explicitGenericInvocationSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_explicitGenericInvocationSuffix_return;

typedef struct activityParser_selector_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_selector_return;

typedef struct activityParser_superSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_superSuffix_return;

typedef struct activityParser_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    activityParser_arguments_return;



/** Context tracking structure for activityParser
 */
struct activityParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     activityParser_compilationUnit_return (*compilationUnit)	(struct activityParser_Ctx_struct * ctx);
     activityParser_blockStatement_return (*blockStatement)	(struct activityParser_Ctx_struct * ctx);
     activityParser_localVariableDeclaration_return (*localVariableDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_statement_return (*statement)	(struct activityParser_Ctx_struct * ctx);
     activityParser_block_return (*block)	(struct activityParser_Ctx_struct * ctx);
     activityParser_catches_return (*catches)	(struct activityParser_Ctx_struct * ctx);
     activityParser_catchClause_return (*catchClause)	(struct activityParser_Ctx_struct * ctx);
     activityParser_formalParameter_return (*formalParameter)	(struct activityParser_Ctx_struct * ctx);
     activityParser_switchBlockStatementGroups_return (*switchBlockStatementGroups)	(struct activityParser_Ctx_struct * ctx);
     activityParser_switchBlockStatementGroup_return (*switchBlockStatementGroup)	(struct activityParser_Ctx_struct * ctx);
     activityParser_switchLabel_return (*switchLabel)	(struct activityParser_Ctx_struct * ctx);
     activityParser_moreStatementExpressions_return (*moreStatementExpressions)	(struct activityParser_Ctx_struct * ctx);
     activityParser_forControl_return (*forControl)	(struct activityParser_Ctx_struct * ctx);
     activityParser_forInit_return (*forInit)	(struct activityParser_Ctx_struct * ctx);
     activityParser_forVarControl_return (*forVarControl)	(struct activityParser_Ctx_struct * ctx);
     activityParser_forUpdate_return (*forUpdate)	(struct activityParser_Ctx_struct * ctx);
     activityParser_typeDeclaration_return (*typeDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_classOrInterfaceDeclaration_return (*classOrInterfaceDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_classDeclaration_return (*classDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_normalClassDeclaration_return (*normalClassDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_typeParameters_return (*typeParameters)	(struct activityParser_Ctx_struct * ctx);
     activityParser_typeParameter_return (*typeParameter)	(struct activityParser_Ctx_struct * ctx);
     activityParser_bound_return (*bound)	(struct activityParser_Ctx_struct * ctx);
     activityParser_enumDeclaration_return (*enumDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_enumBody_return (*enumBody)	(struct activityParser_Ctx_struct * ctx);
     activityParser_enumConstants_return (*enumConstants)	(struct activityParser_Ctx_struct * ctx);
     activityParser_enumConstant_return (*enumConstant)	(struct activityParser_Ctx_struct * ctx);
     activityParser_enumBodyDeclarations_return (*enumBodyDeclarations)	(struct activityParser_Ctx_struct * ctx);
     activityParser_interfaceDeclaration_return (*interfaceDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_normalInterfaceDeclaration_return (*normalInterfaceDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_typeList_return (*typeList)	(struct activityParser_Ctx_struct * ctx);
     activityParser_classBody_return (*classBody)	(struct activityParser_Ctx_struct * ctx);
     activityParser_interfaceBody_return (*interfaceBody)	(struct activityParser_Ctx_struct * ctx);
     activityParser_classBodyDeclaration_return (*classBodyDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_memberDecl_return (*memberDecl)	(struct activityParser_Ctx_struct * ctx);
     activityParser_genericMethodOrConstructorDecl_return (*genericMethodOrConstructorDecl)	(struct activityParser_Ctx_struct * ctx);
     activityParser_genericMethodOrConstructorRest_return (*genericMethodOrConstructorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_methodDeclaration_return (*methodDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_fieldDeclaration_return (*fieldDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_interfaceBodyDeclaration_return (*interfaceBodyDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_interfaceMemberDecl_return (*interfaceMemberDecl)	(struct activityParser_Ctx_struct * ctx);
     activityParser_interfaceMethodOrFieldDecl_return (*interfaceMethodOrFieldDecl)	(struct activityParser_Ctx_struct * ctx);
     activityParser_interfaceMethodOrFieldRest_return (*interfaceMethodOrFieldRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_methodDeclaratorRest_return (*methodDeclaratorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_voidMethodDeclaratorRest_return (*voidMethodDeclaratorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_interfaceMethodDeclaratorRest_return (*interfaceMethodDeclaratorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_interfaceGenericMethodDecl_return (*interfaceGenericMethodDecl)	(struct activityParser_Ctx_struct * ctx);
     activityParser_voidInterfaceMethodDeclaratorRest_return (*voidInterfaceMethodDeclaratorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_constructorDeclaratorRest_return (*constructorDeclaratorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_constantDeclarator_return (*constantDeclarator)	(struct activityParser_Ctx_struct * ctx);
     activityParser_variableDeclarators_return (*variableDeclarators)	(struct activityParser_Ctx_struct * ctx);
     activityParser_variableDeclarator_return (*variableDeclarator)	(struct activityParser_Ctx_struct * ctx);
     activityParser_variableDeclaratorRest_return (*variableDeclaratorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_constantDeclaratorsRest_return (*constantDeclaratorsRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_constantDeclaratorRest_return (*constantDeclaratorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_variableDeclaratorId_return (*variableDeclaratorId)	(struct activityParser_Ctx_struct * ctx);
     activityParser_variableInitializer_return (*variableInitializer)	(struct activityParser_Ctx_struct * ctx);
     activityParser_arrayInitializer_return (*arrayInitializer)	(struct activityParser_Ctx_struct * ctx);
     activityParser_modifier_return (*modifier)	(struct activityParser_Ctx_struct * ctx);
     activityParser_packageOrTypeName_return (*packageOrTypeName)	(struct activityParser_Ctx_struct * ctx);
     activityParser_enumConstantName_return (*enumConstantName)	(struct activityParser_Ctx_struct * ctx);
     activityParser_typeName_return (*typeName)	(struct activityParser_Ctx_struct * ctx);
     activityParser_type_return (*type)	(struct activityParser_Ctx_struct * ctx);
     activityParser_primitiveType_return (*primitiveType)	(struct activityParser_Ctx_struct * ctx);
     activityParser_variableModifier_return (*variableModifier)	(struct activityParser_Ctx_struct * ctx);
     activityParser_typeArguments_return (*typeArguments)	(struct activityParser_Ctx_struct * ctx);
     activityParser_typeArgument_return (*typeArgument)	(struct activityParser_Ctx_struct * ctx);
     activityParser_qualifiedNameList_return (*qualifiedNameList)	(struct activityParser_Ctx_struct * ctx);
     activityParser_formalParameters_return (*formalParameters)	(struct activityParser_Ctx_struct * ctx);
     activityParser_formalParameterDecls_return (*formalParameterDecls)	(struct activityParser_Ctx_struct * ctx);
     activityParser_formalParameterDeclsRest_return (*formalParameterDeclsRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_methodBody_return (*methodBody)	(struct activityParser_Ctx_struct * ctx);
     activityParser_qualifiedName_return (*qualifiedName)	(struct activityParser_Ctx_struct * ctx);
     activityParser_literal_return (*literal)	(struct activityParser_Ctx_struct * ctx);
     activityParser_integerLiteral_return (*integerLiteral)	(struct activityParser_Ctx_struct * ctx);
     activityParser_booleanLiteral_return (*booleanLiteral)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotations_return (*annotations)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotation_return (*annotation)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotationName_return (*annotationName)	(struct activityParser_Ctx_struct * ctx);
     activityParser_elementValuePairs_return (*elementValuePairs)	(struct activityParser_Ctx_struct * ctx);
     activityParser_elementValuePair_return (*elementValuePair)	(struct activityParser_Ctx_struct * ctx);
     activityParser_elementValue_return (*elementValue)	(struct activityParser_Ctx_struct * ctx);
     activityParser_elementValueArrayInitializer_return (*elementValueArrayInitializer)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotationTypeDeclaration_return (*annotationTypeDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotationTypeBody_return (*annotationTypeBody)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotationTypeElementDeclarations_return (*annotationTypeElementDeclarations)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotationTypeElementDeclaration_return (*annotationTypeElementDeclaration)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotationTypeElementRest_return (*annotationTypeElementRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotationMethodOrConstantRest_return (*annotationMethodOrConstantRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotationMethodRest_return (*annotationMethodRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_annotationConstantRest_return (*annotationConstantRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_defaultValue_return (*defaultValue)	(struct activityParser_Ctx_struct * ctx);
     activityParser_parExpression_return (*parExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_expressionList_return (*expressionList)	(struct activityParser_Ctx_struct * ctx);
     activityParser_statementExpression_return (*statementExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_constantExpression_return (*constantExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_expression_return (*expression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_assignmentOperator_return (*assignmentOperator)	(struct activityParser_Ctx_struct * ctx);
     activityParser_conditionalExpression_return (*conditionalExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_conditionalOrExpression_return (*conditionalOrExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_conditionalAndExpression_return (*conditionalAndExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_inclusiveOrExpression_return (*inclusiveOrExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_exclusiveOrExpression_return (*exclusiveOrExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_andExpression_return (*andExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_equalityExpression_return (*equalityExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_instanceOfExpression_return (*instanceOfExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_relationalExpression_return (*relationalExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_relationalOp_return (*relationalOp)	(struct activityParser_Ctx_struct * ctx);
     activityParser_shiftExpression_return (*shiftExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_shiftOp_return (*shiftOp)	(struct activityParser_Ctx_struct * ctx);
     activityParser_additiveExpression_return (*additiveExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_multiplicativeExpression_return (*multiplicativeExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_unaryExpression_return (*unaryExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_unaryExpressionNotPlusMinus_return (*unaryExpressionNotPlusMinus)	(struct activityParser_Ctx_struct * ctx);
     activityParser_castExpression_return (*castExpression)	(struct activityParser_Ctx_struct * ctx);
     activityParser_primary_return (*primary)	(struct activityParser_Ctx_struct * ctx);
     activityParser_identifierSuffix_return (*identifierSuffix)	(struct activityParser_Ctx_struct * ctx);
     activityParser_creator_return (*creator)	(struct activityParser_Ctx_struct * ctx);
     activityParser_createdName_return (*createdName)	(struct activityParser_Ctx_struct * ctx);
     activityParser_innerCreator_return (*innerCreator)	(struct activityParser_Ctx_struct * ctx);
     activityParser_arrayCreatorRest_return (*arrayCreatorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_classCreatorRest_return (*classCreatorRest)	(struct activityParser_Ctx_struct * ctx);
     activityParser_explicitGenericInvocation_return (*explicitGenericInvocation)	(struct activityParser_Ctx_struct * ctx);
     activityParser_nonWildcardTypeArguments_return (*nonWildcardTypeArguments)	(struct activityParser_Ctx_struct * ctx);
     activityParser_explicitGenericInvocationSuffix_return (*explicitGenericInvocationSuffix)	(struct activityParser_Ctx_struct * ctx);
     activityParser_selector_return (*selector)	(struct activityParser_Ctx_struct * ctx);
     activityParser_superSuffix_return (*superSuffix)	(struct activityParser_Ctx_struct * ctx);
     activityParser_arguments_return (*arguments)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred2_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred12_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred13_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred31_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred32_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred34_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred39_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred71_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred72_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred118_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred168_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred170_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred172_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred177_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred188_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred198_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred202_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred204_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred216_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred220_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred221_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred225_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred226_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred231_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred232_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred238_activity)	(struct activityParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred254_activity)	(struct activityParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct activityParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pactivityParser activityParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pactivityParser activityParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__29      29
#define T__28      28
#define T__27      27
#define T__26      26
#define FloatTypeSuffix      15
#define T__25      25
#define OctalLiteral      10
#define T__24      24
#define EOF      -1
#define Identifier      4
#define T__93      93
#define T__94      94
#define T__91      91
#define T__92      92
#define T__90      90
#define COMMENT      22
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define LINE_COMMENT      23
#define IntegerTypeSuffix      13
#define T__85      85
#define T__84      84
#define T__87      87
#define T__86      86
#define T__89      89
#define T__88      88
#define WS      21
#define T__71      71
#define T__72      72
#define T__70      70
#define FloatingPointLiteral      6
#define JavaIDDigit      20
#define T__76      76
#define T__75      75
#define T__74      74
#define Letter      19
#define EscapeSequence      16
#define T__73      73
#define T__79      79
#define T__78      78
#define T__77      77
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define T__65      65
#define T__62      62
#define T__63      63
#define CharacterLiteral      7
#define Exponent      14
#define T__61      61
#define T__60      60
#define HexDigit      12
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__107      107
#define T__108      108
#define T__109      109
#define T__59      59
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__111      111
#define T__110      110
#define T__50      50
#define T__42      42
#define HexLiteral      9
#define T__43      43
#define T__40      40
#define T__41      41
#define T__46      46
#define T__47      47
#define T__44      44
#define T__45      45
#define T__48      48
#define T__49      49
#define T__102      102
#define T__101      101
#define T__100      100
#define DecimalLiteral      11
#define StringLiteral      8
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define ENUM      5
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define UnicodeEscape      17
#define OctalEscape      18
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for activityParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
