/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : D:\\Diploma\\ANTLR\\java.g
 *     -                            On : 2010-04-29 13:35:04
 *     -                for the parser : javaParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser javaParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pjavaParser, which is returned from a call to javaParserNew().
 *
 * The methods in pjavaParser are  as follows:
 *
 *  - javaParser_compilationUnit_return      pjavaParser->compilationUnit(pjavaParser)
 *  - javaParser_packageDeclaration_return      pjavaParser->packageDeclaration(pjavaParser)
 *  - javaParser_importDeclaration_return      pjavaParser->importDeclaration(pjavaParser)
 *  - javaParser_typeDeclaration_return      pjavaParser->typeDeclaration(pjavaParser)
 *  - javaParser_classOrInterfaceDeclaration_return      pjavaParser->classOrInterfaceDeclaration(pjavaParser)
 *  - javaParser_classDeclaration_return      pjavaParser->classDeclaration(pjavaParser)
 *  - javaParser_normalClassDeclaration_return      pjavaParser->normalClassDeclaration(pjavaParser)
 *  - javaParser_typeParameters_return      pjavaParser->typeParameters(pjavaParser)
 *  - javaParser_typeParameter_return      pjavaParser->typeParameter(pjavaParser)
 *  - javaParser_bound_return      pjavaParser->bound(pjavaParser)
 *  - javaParser_enumDeclaration_return      pjavaParser->enumDeclaration(pjavaParser)
 *  - javaParser_enumBody_return      pjavaParser->enumBody(pjavaParser)
 *  - javaParser_enumConstants_return      pjavaParser->enumConstants(pjavaParser)
 *  - javaParser_enumConstant_return      pjavaParser->enumConstant(pjavaParser)
 *  - javaParser_enumBodyDeclarations_return      pjavaParser->enumBodyDeclarations(pjavaParser)
 *  - javaParser_interfaceDeclaration_return      pjavaParser->interfaceDeclaration(pjavaParser)
 *  - javaParser_normalInterfaceDeclaration_return      pjavaParser->normalInterfaceDeclaration(pjavaParser)
 *  - javaParser_typeList_return      pjavaParser->typeList(pjavaParser)
 *  - javaParser_classBody_return      pjavaParser->classBody(pjavaParser)
 *  - javaParser_interfaceBody_return      pjavaParser->interfaceBody(pjavaParser)
 *  - javaParser_classBodyDeclaration_return      pjavaParser->classBodyDeclaration(pjavaParser)
 *  - javaParser_memberDecl_return      pjavaParser->memberDecl(pjavaParser)
 *  - javaParser_genericMethodOrConstructorDecl_return      pjavaParser->genericMethodOrConstructorDecl(pjavaParser)
 *  - javaParser_genericMethodOrConstructorRest_return      pjavaParser->genericMethodOrConstructorRest(pjavaParser)
 *  - javaParser_methodDeclaration_return      pjavaParser->methodDeclaration(pjavaParser)
 *  - javaParser_fieldDeclaration_return      pjavaParser->fieldDeclaration(pjavaParser)
 *  - javaParser_interfaceBodyDeclaration_return      pjavaParser->interfaceBodyDeclaration(pjavaParser)
 *  - javaParser_interfaceMemberDecl_return      pjavaParser->interfaceMemberDecl(pjavaParser)
 *  - javaParser_interfaceMethodOrFieldDecl_return      pjavaParser->interfaceMethodOrFieldDecl(pjavaParser)
 *  - javaParser_interfaceMethodOrFieldRest_return      pjavaParser->interfaceMethodOrFieldRest(pjavaParser)
 *  - javaParser_methodDeclaratorRest_return      pjavaParser->methodDeclaratorRest(pjavaParser)
 *  - javaParser_voidMethodDeclaratorRest_return      pjavaParser->voidMethodDeclaratorRest(pjavaParser)
 *  - javaParser_interfaceMethodDeclaratorRest_return      pjavaParser->interfaceMethodDeclaratorRest(pjavaParser)
 *  - javaParser_interfaceGenericMethodDecl_return      pjavaParser->interfaceGenericMethodDecl(pjavaParser)
 *  - javaParser_voidInterfaceMethodDeclaratorRest_return      pjavaParser->voidInterfaceMethodDeclaratorRest(pjavaParser)
 *  - javaParser_constructorDeclaratorRest_return      pjavaParser->constructorDeclaratorRest(pjavaParser)
 *  - javaParser_constantDeclarator_return      pjavaParser->constantDeclarator(pjavaParser)
 *  - javaParser_variableDeclarators_return      pjavaParser->variableDeclarators(pjavaParser)
 *  - javaParser_variableDeclarator_return      pjavaParser->variableDeclarator(pjavaParser)
 *  - javaParser_variableDeclaratorRest_return      pjavaParser->variableDeclaratorRest(pjavaParser)
 *  - javaParser_constantDeclaratorsRest_return      pjavaParser->constantDeclaratorsRest(pjavaParser)
 *  - javaParser_constantDeclaratorRest_return      pjavaParser->constantDeclaratorRest(pjavaParser)
 *  - javaParser_variableDeclaratorId_return      pjavaParser->variableDeclaratorId(pjavaParser)
 *  - javaParser_variableInitializer_return      pjavaParser->variableInitializer(pjavaParser)
 *  - javaParser_arrayInitializer_return      pjavaParser->arrayInitializer(pjavaParser)
 *  - javaParser_modifier_return      pjavaParser->modifier(pjavaParser)
 *  - javaParser_packageOrTypeName_return      pjavaParser->packageOrTypeName(pjavaParser)
 *  - javaParser_enumConstantName_return      pjavaParser->enumConstantName(pjavaParser)
 *  - javaParser_typeName_return      pjavaParser->typeName(pjavaParser)
 *  - javaParser_type_return      pjavaParser->type(pjavaParser)
 *  - javaParser_primitiveType_return      pjavaParser->primitiveType(pjavaParser)
 *  - javaParser_variableModifier_return      pjavaParser->variableModifier(pjavaParser)
 *  - javaParser_typeArguments_return      pjavaParser->typeArguments(pjavaParser)
 *  - javaParser_typeArgument_return      pjavaParser->typeArgument(pjavaParser)
 *  - javaParser_qualifiedNameList_return      pjavaParser->qualifiedNameList(pjavaParser)
 *  - javaParser_formalParameters_return      pjavaParser->formalParameters(pjavaParser)
 *  - javaParser_formalParameterDecls_return      pjavaParser->formalParameterDecls(pjavaParser)
 *  - javaParser_formalParameterDeclsRest_return      pjavaParser->formalParameterDeclsRest(pjavaParser)
 *  - javaParser_methodBody_return      pjavaParser->methodBody(pjavaParser)
 *  - javaParser_qualifiedName_return      pjavaParser->qualifiedName(pjavaParser)
 *  - javaParser_literal_return      pjavaParser->literal(pjavaParser)
 *  - javaParser_integerLiteral_return      pjavaParser->integerLiteral(pjavaParser)
 *  - javaParser_booleanLiteral_return      pjavaParser->booleanLiteral(pjavaParser)
 *  - javaParser_annotations_return      pjavaParser->annotations(pjavaParser)
 *  - javaParser_annotation_return      pjavaParser->annotation(pjavaParser)
 *  - javaParser_annotationName_return      pjavaParser->annotationName(pjavaParser)
 *  - javaParser_elementValuePairs_return      pjavaParser->elementValuePairs(pjavaParser)
 *  - javaParser_elementValuePair_return      pjavaParser->elementValuePair(pjavaParser)
 *  - javaParser_elementValue_return      pjavaParser->elementValue(pjavaParser)
 *  - javaParser_elementValueArrayInitializer_return      pjavaParser->elementValueArrayInitializer(pjavaParser)
 *  - javaParser_annotationTypeDeclaration_return      pjavaParser->annotationTypeDeclaration(pjavaParser)
 *  - javaParser_annotationTypeBody_return      pjavaParser->annotationTypeBody(pjavaParser)
 *  - javaParser_annotationTypeElementDeclarations_return      pjavaParser->annotationTypeElementDeclarations(pjavaParser)
 *  - javaParser_annotationTypeElementDeclaration_return      pjavaParser->annotationTypeElementDeclaration(pjavaParser)
 *  - javaParser_annotationTypeElementRest_return      pjavaParser->annotationTypeElementRest(pjavaParser)
 *  - javaParser_annotationMethodOrConstantRest_return      pjavaParser->annotationMethodOrConstantRest(pjavaParser)
 *  - javaParser_annotationMethodRest_return      pjavaParser->annotationMethodRest(pjavaParser)
 *  - javaParser_annotationConstantRest_return      pjavaParser->annotationConstantRest(pjavaParser)
 *  - javaParser_defaultValue_return      pjavaParser->defaultValue(pjavaParser)
 *  - javaParser_block_return      pjavaParser->block(pjavaParser)
 *  - javaParser_blockStatement_return      pjavaParser->blockStatement(pjavaParser)
 *  - javaParser_localVariableDeclaration_return      pjavaParser->localVariableDeclaration(pjavaParser)
 *  - javaParser_statement_return      pjavaParser->statement(pjavaParser)
 *  - javaParser_catches_return      pjavaParser->catches(pjavaParser)
 *  - javaParser_catchClause_return      pjavaParser->catchClause(pjavaParser)
 *  - javaParser_formalParameter_return      pjavaParser->formalParameter(pjavaParser)
 *  - javaParser_switchBlockStatementGroups_return      pjavaParser->switchBlockStatementGroups(pjavaParser)
 *  - javaParser_switchBlockStatementGroup_return      pjavaParser->switchBlockStatementGroup(pjavaParser)
 *  - javaParser_switchLabel_return      pjavaParser->switchLabel(pjavaParser)
 *  - javaParser_moreStatementExpressions_return      pjavaParser->moreStatementExpressions(pjavaParser)
 *  - javaParser_forControl_return      pjavaParser->forControl(pjavaParser)
 *  - javaParser_forInit_return      pjavaParser->forInit(pjavaParser)
 *  - javaParser_forVarControl_return      pjavaParser->forVarControl(pjavaParser)
 *  - javaParser_forUpdate_return      pjavaParser->forUpdate(pjavaParser)
 *  - javaParser_parExpression_return      pjavaParser->parExpression(pjavaParser)
 *  - javaParser_expressionList_return      pjavaParser->expressionList(pjavaParser)
 *  - javaParser_statementExpression_return      pjavaParser->statementExpression(pjavaParser)
 *  - javaParser_constantExpression_return      pjavaParser->constantExpression(pjavaParser)
 *  - javaParser_expression_return      pjavaParser->expression(pjavaParser)
 *  - javaParser_assignmentOperator_return      pjavaParser->assignmentOperator(pjavaParser)
 *  - javaParser_conditionalExpression_return      pjavaParser->conditionalExpression(pjavaParser)
 *  - javaParser_conditionalOrExpression_return      pjavaParser->conditionalOrExpression(pjavaParser)
 *  - javaParser_conditionalAndExpression_return      pjavaParser->conditionalAndExpression(pjavaParser)
 *  - javaParser_inclusiveOrExpression_return      pjavaParser->inclusiveOrExpression(pjavaParser)
 *  - javaParser_exclusiveOrExpression_return      pjavaParser->exclusiveOrExpression(pjavaParser)
 *  - javaParser_andExpression_return      pjavaParser->andExpression(pjavaParser)
 *  - javaParser_equalityExpression_return      pjavaParser->equalityExpression(pjavaParser)
 *  - javaParser_instanceOfExpression_return      pjavaParser->instanceOfExpression(pjavaParser)
 *  - javaParser_relationalExpression_return      pjavaParser->relationalExpression(pjavaParser)
 *  - javaParser_relationalOp_return      pjavaParser->relationalOp(pjavaParser)
 *  - javaParser_shiftExpression_return      pjavaParser->shiftExpression(pjavaParser)
 *  - javaParser_shiftOp_return      pjavaParser->shiftOp(pjavaParser)
 *  - javaParser_additiveExpression_return      pjavaParser->additiveExpression(pjavaParser)
 *  - javaParser_multiplicativeExpression_return      pjavaParser->multiplicativeExpression(pjavaParser)
 *  - javaParser_unaryExpression_return      pjavaParser->unaryExpression(pjavaParser)
 *  - javaParser_unaryExpressionNotPlusMinus_return      pjavaParser->unaryExpressionNotPlusMinus(pjavaParser)
 *  - javaParser_castExpression_return      pjavaParser->castExpression(pjavaParser)
 *  - javaParser_primary_return      pjavaParser->primary(pjavaParser)
 *  - javaParser_identifierSuffix_return      pjavaParser->identifierSuffix(pjavaParser)
 *  - javaParser_creator_return      pjavaParser->creator(pjavaParser)
 *  - javaParser_createdName_return      pjavaParser->createdName(pjavaParser)
 *  - javaParser_innerCreator_return      pjavaParser->innerCreator(pjavaParser)
 *  - javaParser_arrayCreatorRest_return      pjavaParser->arrayCreatorRest(pjavaParser)
 *  - javaParser_classCreatorRest_return      pjavaParser->classCreatorRest(pjavaParser)
 *  - javaParser_explicitGenericInvocation_return      pjavaParser->explicitGenericInvocation(pjavaParser)
 *  - javaParser_nonWildcardTypeArguments_return      pjavaParser->nonWildcardTypeArguments(pjavaParser)
 *  - javaParser_explicitGenericInvocationSuffix_return      pjavaParser->explicitGenericInvocationSuffix(pjavaParser)
 *  - javaParser_selector_return      pjavaParser->selector(pjavaParser)
 *  - javaParser_superSuffix_return      pjavaParser->superSuffix(pjavaParser)
 *  - javaParser_arguments_return      pjavaParser->arguments(pjavaParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_javaParser_H
#define _javaParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct javaParser_Ctx_struct javaParser, * pjavaParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct javaParser_compilationUnit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_compilationUnit_return;

typedef struct javaParser_packageDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_packageDeclaration_return;

typedef struct javaParser_importDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_importDeclaration_return;

typedef struct javaParser_typeDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_typeDeclaration_return;

typedef struct javaParser_classOrInterfaceDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_classOrInterfaceDeclaration_return;

typedef struct javaParser_classDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_classDeclaration_return;

typedef struct javaParser_normalClassDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_normalClassDeclaration_return;

typedef struct javaParser_typeParameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_typeParameters_return;

typedef struct javaParser_typeParameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_typeParameter_return;

typedef struct javaParser_bound_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_bound_return;

typedef struct javaParser_enumDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_enumDeclaration_return;

typedef struct javaParser_enumBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_enumBody_return;

typedef struct javaParser_enumConstants_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_enumConstants_return;

typedef struct javaParser_enumConstant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_enumConstant_return;

typedef struct javaParser_enumBodyDeclarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_enumBodyDeclarations_return;

typedef struct javaParser_interfaceDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_interfaceDeclaration_return;

typedef struct javaParser_normalInterfaceDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_normalInterfaceDeclaration_return;

typedef struct javaParser_typeList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_typeList_return;

typedef struct javaParser_classBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_classBody_return;

typedef struct javaParser_interfaceBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_interfaceBody_return;

typedef struct javaParser_classBodyDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_classBodyDeclaration_return;

typedef struct javaParser_memberDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_memberDecl_return;

typedef struct javaParser_genericMethodOrConstructorDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_genericMethodOrConstructorDecl_return;

typedef struct javaParser_genericMethodOrConstructorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_genericMethodOrConstructorRest_return;

typedef struct javaParser_methodDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_methodDeclaration_return;

typedef struct javaParser_fieldDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_fieldDeclaration_return;

typedef struct javaParser_interfaceBodyDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_interfaceBodyDeclaration_return;

typedef struct javaParser_interfaceMemberDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_interfaceMemberDecl_return;

typedef struct javaParser_interfaceMethodOrFieldDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_interfaceMethodOrFieldDecl_return;

typedef struct javaParser_interfaceMethodOrFieldRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_interfaceMethodOrFieldRest_return;

typedef struct javaParser_methodDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_methodDeclaratorRest_return;

typedef struct javaParser_voidMethodDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_voidMethodDeclaratorRest_return;

typedef struct javaParser_interfaceMethodDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_interfaceMethodDeclaratorRest_return;

typedef struct javaParser_interfaceGenericMethodDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_interfaceGenericMethodDecl_return;

typedef struct javaParser_voidInterfaceMethodDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_voidInterfaceMethodDeclaratorRest_return;

typedef struct javaParser_constructorDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_constructorDeclaratorRest_return;

typedef struct javaParser_constantDeclarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_constantDeclarator_return;

typedef struct javaParser_variableDeclarators_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_variableDeclarators_return;

typedef struct javaParser_variableDeclarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_variableDeclarator_return;

typedef struct javaParser_variableDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_variableDeclaratorRest_return;

typedef struct javaParser_constantDeclaratorsRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_constantDeclaratorsRest_return;

typedef struct javaParser_constantDeclaratorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_constantDeclaratorRest_return;

typedef struct javaParser_variableDeclaratorId_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_variableDeclaratorId_return;

typedef struct javaParser_variableInitializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_variableInitializer_return;

typedef struct javaParser_arrayInitializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_arrayInitializer_return;

typedef struct javaParser_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_modifier_return;

typedef struct javaParser_packageOrTypeName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_packageOrTypeName_return;

typedef struct javaParser_enumConstantName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_enumConstantName_return;

typedef struct javaParser_typeName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_typeName_return;

typedef struct javaParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_type_return;

typedef struct javaParser_primitiveType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_primitiveType_return;

typedef struct javaParser_variableModifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_variableModifier_return;

typedef struct javaParser_typeArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_typeArguments_return;

typedef struct javaParser_typeArgument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_typeArgument_return;

typedef struct javaParser_qualifiedNameList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_qualifiedNameList_return;

typedef struct javaParser_formalParameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_formalParameters_return;

typedef struct javaParser_formalParameterDecls_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_formalParameterDecls_return;

typedef struct javaParser_formalParameterDeclsRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_formalParameterDeclsRest_return;

typedef struct javaParser_methodBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_methodBody_return;

typedef struct javaParser_qualifiedName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_qualifiedName_return;

typedef struct javaParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_literal_return;

typedef struct javaParser_integerLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_integerLiteral_return;

typedef struct javaParser_booleanLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_booleanLiteral_return;

typedef struct javaParser_annotations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotations_return;

typedef struct javaParser_annotation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotation_return;

typedef struct javaParser_annotationName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotationName_return;

typedef struct javaParser_elementValuePairs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_elementValuePairs_return;

typedef struct javaParser_elementValuePair_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_elementValuePair_return;

typedef struct javaParser_elementValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_elementValue_return;

typedef struct javaParser_elementValueArrayInitializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_elementValueArrayInitializer_return;

typedef struct javaParser_annotationTypeDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotationTypeDeclaration_return;

typedef struct javaParser_annotationTypeBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotationTypeBody_return;

typedef struct javaParser_annotationTypeElementDeclarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotationTypeElementDeclarations_return;

typedef struct javaParser_annotationTypeElementDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotationTypeElementDeclaration_return;

typedef struct javaParser_annotationTypeElementRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotationTypeElementRest_return;

typedef struct javaParser_annotationMethodOrConstantRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotationMethodOrConstantRest_return;

typedef struct javaParser_annotationMethodRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotationMethodRest_return;

typedef struct javaParser_annotationConstantRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_annotationConstantRest_return;

typedef struct javaParser_defaultValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_defaultValue_return;

typedef struct javaParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_block_return;

typedef struct javaParser_blockStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_blockStatement_return;

typedef struct javaParser_localVariableDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_localVariableDeclaration_return;

typedef struct javaParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_statement_return;

typedef struct javaParser_catches_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_catches_return;

typedef struct javaParser_catchClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_catchClause_return;

typedef struct javaParser_formalParameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_formalParameter_return;

typedef struct javaParser_switchBlockStatementGroups_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_switchBlockStatementGroups_return;

typedef struct javaParser_switchBlockStatementGroup_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_switchBlockStatementGroup_return;

typedef struct javaParser_switchLabel_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_switchLabel_return;

typedef struct javaParser_moreStatementExpressions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_moreStatementExpressions_return;

typedef struct javaParser_forControl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_forControl_return;

typedef struct javaParser_forInit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_forInit_return;

typedef struct javaParser_forVarControl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_forVarControl_return;

typedef struct javaParser_forUpdate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_forUpdate_return;

typedef struct javaParser_parExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_parExpression_return;

typedef struct javaParser_expressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_expressionList_return;

typedef struct javaParser_statementExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_statementExpression_return;

typedef struct javaParser_constantExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_constantExpression_return;

typedef struct javaParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_expression_return;

typedef struct javaParser_assignmentOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_assignmentOperator_return;

typedef struct javaParser_conditionalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_conditionalExpression_return;

typedef struct javaParser_conditionalOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_conditionalOrExpression_return;

typedef struct javaParser_conditionalAndExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_conditionalAndExpression_return;

typedef struct javaParser_inclusiveOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_inclusiveOrExpression_return;

typedef struct javaParser_exclusiveOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_exclusiveOrExpression_return;

typedef struct javaParser_andExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_andExpression_return;

typedef struct javaParser_equalityExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_equalityExpression_return;

typedef struct javaParser_instanceOfExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_instanceOfExpression_return;

typedef struct javaParser_relationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_relationalExpression_return;

typedef struct javaParser_relationalOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_relationalOp_return;

typedef struct javaParser_shiftExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_shiftExpression_return;

typedef struct javaParser_shiftOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_shiftOp_return;

typedef struct javaParser_additiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_additiveExpression_return;

typedef struct javaParser_multiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_multiplicativeExpression_return;

typedef struct javaParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_unaryExpression_return;

typedef struct javaParser_unaryExpressionNotPlusMinus_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_unaryExpressionNotPlusMinus_return;

typedef struct javaParser_castExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_castExpression_return;

typedef struct javaParser_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_primary_return;

typedef struct javaParser_identifierSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_identifierSuffix_return;

typedef struct javaParser_creator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_creator_return;

typedef struct javaParser_createdName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_createdName_return;

typedef struct javaParser_innerCreator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_innerCreator_return;

typedef struct javaParser_arrayCreatorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_arrayCreatorRest_return;

typedef struct javaParser_classCreatorRest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_classCreatorRest_return;

typedef struct javaParser_explicitGenericInvocation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_explicitGenericInvocation_return;

typedef struct javaParser_nonWildcardTypeArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_nonWildcardTypeArguments_return;

typedef struct javaParser_explicitGenericInvocationSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_explicitGenericInvocationSuffix_return;

typedef struct javaParser_selector_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_selector_return;

typedef struct javaParser_superSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_superSuffix_return;

typedef struct javaParser_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    javaParser_arguments_return;



/** Context tracking structure for javaParser
 */
struct javaParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     javaParser_compilationUnit_return (*compilationUnit)	(struct javaParser_Ctx_struct * ctx);
     javaParser_packageDeclaration_return (*packageDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_importDeclaration_return (*importDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_typeDeclaration_return (*typeDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_classOrInterfaceDeclaration_return (*classOrInterfaceDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_classDeclaration_return (*classDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_normalClassDeclaration_return (*normalClassDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_typeParameters_return (*typeParameters)	(struct javaParser_Ctx_struct * ctx);
     javaParser_typeParameter_return (*typeParameter)	(struct javaParser_Ctx_struct * ctx);
     javaParser_bound_return (*bound)	(struct javaParser_Ctx_struct * ctx);
     javaParser_enumDeclaration_return (*enumDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_enumBody_return (*enumBody)	(struct javaParser_Ctx_struct * ctx);
     javaParser_enumConstants_return (*enumConstants)	(struct javaParser_Ctx_struct * ctx);
     javaParser_enumConstant_return (*enumConstant)	(struct javaParser_Ctx_struct * ctx);
     javaParser_enumBodyDeclarations_return (*enumBodyDeclarations)	(struct javaParser_Ctx_struct * ctx);
     javaParser_interfaceDeclaration_return (*interfaceDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_normalInterfaceDeclaration_return (*normalInterfaceDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_typeList_return (*typeList)	(struct javaParser_Ctx_struct * ctx);
     javaParser_classBody_return (*classBody)	(struct javaParser_Ctx_struct * ctx);
     javaParser_interfaceBody_return (*interfaceBody)	(struct javaParser_Ctx_struct * ctx);
     javaParser_classBodyDeclaration_return (*classBodyDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_memberDecl_return (*memberDecl)	(struct javaParser_Ctx_struct * ctx);
     javaParser_genericMethodOrConstructorDecl_return (*genericMethodOrConstructorDecl)	(struct javaParser_Ctx_struct * ctx);
     javaParser_genericMethodOrConstructorRest_return (*genericMethodOrConstructorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_methodDeclaration_return (*methodDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_fieldDeclaration_return (*fieldDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_interfaceBodyDeclaration_return (*interfaceBodyDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_interfaceMemberDecl_return (*interfaceMemberDecl)	(struct javaParser_Ctx_struct * ctx);
     javaParser_interfaceMethodOrFieldDecl_return (*interfaceMethodOrFieldDecl)	(struct javaParser_Ctx_struct * ctx);
     javaParser_interfaceMethodOrFieldRest_return (*interfaceMethodOrFieldRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_methodDeclaratorRest_return (*methodDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_voidMethodDeclaratorRest_return (*voidMethodDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_interfaceMethodDeclaratorRest_return (*interfaceMethodDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_interfaceGenericMethodDecl_return (*interfaceGenericMethodDecl)	(struct javaParser_Ctx_struct * ctx);
     javaParser_voidInterfaceMethodDeclaratorRest_return (*voidInterfaceMethodDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_constructorDeclaratorRest_return (*constructorDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_constantDeclarator_return (*constantDeclarator)	(struct javaParser_Ctx_struct * ctx);
     javaParser_variableDeclarators_return (*variableDeclarators)	(struct javaParser_Ctx_struct * ctx);
     javaParser_variableDeclarator_return (*variableDeclarator)	(struct javaParser_Ctx_struct * ctx);
     javaParser_variableDeclaratorRest_return (*variableDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_constantDeclaratorsRest_return (*constantDeclaratorsRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_constantDeclaratorRest_return (*constantDeclaratorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_variableDeclaratorId_return (*variableDeclaratorId)	(struct javaParser_Ctx_struct * ctx);
     javaParser_variableInitializer_return (*variableInitializer)	(struct javaParser_Ctx_struct * ctx);
     javaParser_arrayInitializer_return (*arrayInitializer)	(struct javaParser_Ctx_struct * ctx);
     javaParser_modifier_return (*modifier)	(struct javaParser_Ctx_struct * ctx);
     javaParser_packageOrTypeName_return (*packageOrTypeName)	(struct javaParser_Ctx_struct * ctx);
     javaParser_enumConstantName_return (*enumConstantName)	(struct javaParser_Ctx_struct * ctx);
     javaParser_typeName_return (*typeName)	(struct javaParser_Ctx_struct * ctx);
     javaParser_type_return (*type)	(struct javaParser_Ctx_struct * ctx);
     javaParser_primitiveType_return (*primitiveType)	(struct javaParser_Ctx_struct * ctx);
     javaParser_variableModifier_return (*variableModifier)	(struct javaParser_Ctx_struct * ctx);
     javaParser_typeArguments_return (*typeArguments)	(struct javaParser_Ctx_struct * ctx);
     javaParser_typeArgument_return (*typeArgument)	(struct javaParser_Ctx_struct * ctx);
     javaParser_qualifiedNameList_return (*qualifiedNameList)	(struct javaParser_Ctx_struct * ctx);
     javaParser_formalParameters_return (*formalParameters)	(struct javaParser_Ctx_struct * ctx);
     javaParser_formalParameterDecls_return (*formalParameterDecls)	(struct javaParser_Ctx_struct * ctx);
     javaParser_formalParameterDeclsRest_return (*formalParameterDeclsRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_methodBody_return (*methodBody)	(struct javaParser_Ctx_struct * ctx);
     javaParser_qualifiedName_return (*qualifiedName)	(struct javaParser_Ctx_struct * ctx);
     javaParser_literal_return (*literal)	(struct javaParser_Ctx_struct * ctx);
     javaParser_integerLiteral_return (*integerLiteral)	(struct javaParser_Ctx_struct * ctx);
     javaParser_booleanLiteral_return (*booleanLiteral)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotations_return (*annotations)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotation_return (*annotation)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotationName_return (*annotationName)	(struct javaParser_Ctx_struct * ctx);
     javaParser_elementValuePairs_return (*elementValuePairs)	(struct javaParser_Ctx_struct * ctx);
     javaParser_elementValuePair_return (*elementValuePair)	(struct javaParser_Ctx_struct * ctx);
     javaParser_elementValue_return (*elementValue)	(struct javaParser_Ctx_struct * ctx);
     javaParser_elementValueArrayInitializer_return (*elementValueArrayInitializer)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotationTypeDeclaration_return (*annotationTypeDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotationTypeBody_return (*annotationTypeBody)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotationTypeElementDeclarations_return (*annotationTypeElementDeclarations)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotationTypeElementDeclaration_return (*annotationTypeElementDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotationTypeElementRest_return (*annotationTypeElementRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotationMethodOrConstantRest_return (*annotationMethodOrConstantRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotationMethodRest_return (*annotationMethodRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_annotationConstantRest_return (*annotationConstantRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_defaultValue_return (*defaultValue)	(struct javaParser_Ctx_struct * ctx);
     javaParser_block_return (*block)	(struct javaParser_Ctx_struct * ctx);
     javaParser_blockStatement_return (*blockStatement)	(struct javaParser_Ctx_struct * ctx);
     javaParser_localVariableDeclaration_return (*localVariableDeclaration)	(struct javaParser_Ctx_struct * ctx);
     javaParser_statement_return (*statement)	(struct javaParser_Ctx_struct * ctx);
     javaParser_catches_return (*catches)	(struct javaParser_Ctx_struct * ctx);
     javaParser_catchClause_return (*catchClause)	(struct javaParser_Ctx_struct * ctx);
     javaParser_formalParameter_return (*formalParameter)	(struct javaParser_Ctx_struct * ctx);
     javaParser_switchBlockStatementGroups_return (*switchBlockStatementGroups)	(struct javaParser_Ctx_struct * ctx);
     javaParser_switchBlockStatementGroup_return (*switchBlockStatementGroup)	(struct javaParser_Ctx_struct * ctx);
     javaParser_switchLabel_return (*switchLabel)	(struct javaParser_Ctx_struct * ctx);
     javaParser_moreStatementExpressions_return (*moreStatementExpressions)	(struct javaParser_Ctx_struct * ctx);
     javaParser_forControl_return (*forControl)	(struct javaParser_Ctx_struct * ctx);
     javaParser_forInit_return (*forInit)	(struct javaParser_Ctx_struct * ctx);
     javaParser_forVarControl_return (*forVarControl)	(struct javaParser_Ctx_struct * ctx);
     javaParser_forUpdate_return (*forUpdate)	(struct javaParser_Ctx_struct * ctx);
     javaParser_parExpression_return (*parExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_expressionList_return (*expressionList)	(struct javaParser_Ctx_struct * ctx);
     javaParser_statementExpression_return (*statementExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_constantExpression_return (*constantExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_expression_return (*expression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_assignmentOperator_return (*assignmentOperator)	(struct javaParser_Ctx_struct * ctx);
     javaParser_conditionalExpression_return (*conditionalExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_conditionalOrExpression_return (*conditionalOrExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_conditionalAndExpression_return (*conditionalAndExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_inclusiveOrExpression_return (*inclusiveOrExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_exclusiveOrExpression_return (*exclusiveOrExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_andExpression_return (*andExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_equalityExpression_return (*equalityExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_instanceOfExpression_return (*instanceOfExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_relationalExpression_return (*relationalExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_relationalOp_return (*relationalOp)	(struct javaParser_Ctx_struct * ctx);
     javaParser_shiftExpression_return (*shiftExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_shiftOp_return (*shiftOp)	(struct javaParser_Ctx_struct * ctx);
     javaParser_additiveExpression_return (*additiveExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_multiplicativeExpression_return (*multiplicativeExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_unaryExpression_return (*unaryExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_unaryExpressionNotPlusMinus_return (*unaryExpressionNotPlusMinus)	(struct javaParser_Ctx_struct * ctx);
     javaParser_castExpression_return (*castExpression)	(struct javaParser_Ctx_struct * ctx);
     javaParser_primary_return (*primary)	(struct javaParser_Ctx_struct * ctx);
     javaParser_identifierSuffix_return (*identifierSuffix)	(struct javaParser_Ctx_struct * ctx);
     javaParser_creator_return (*creator)	(struct javaParser_Ctx_struct * ctx);
     javaParser_createdName_return (*createdName)	(struct javaParser_Ctx_struct * ctx);
     javaParser_innerCreator_return (*innerCreator)	(struct javaParser_Ctx_struct * ctx);
     javaParser_arrayCreatorRest_return (*arrayCreatorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_classCreatorRest_return (*classCreatorRest)	(struct javaParser_Ctx_struct * ctx);
     javaParser_explicitGenericInvocation_return (*explicitGenericInvocation)	(struct javaParser_Ctx_struct * ctx);
     javaParser_nonWildcardTypeArguments_return (*nonWildcardTypeArguments)	(struct javaParser_Ctx_struct * ctx);
     javaParser_explicitGenericInvocationSuffix_return (*explicitGenericInvocationSuffix)	(struct javaParser_Ctx_struct * ctx);
     javaParser_selector_return (*selector)	(struct javaParser_Ctx_struct * ctx);
     javaParser_superSuffix_return (*superSuffix)	(struct javaParser_Ctx_struct * ctx);
     javaParser_arguments_return (*arguments)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred38_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred39_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred85_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred120_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred135_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred137_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred139_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred144_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred145_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred155_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred156_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred173_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred174_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred176_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred181_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred184_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred195_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred205_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred209_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred211_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred223_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred227_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred228_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred232_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred233_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred238_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred239_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred245_java)	(struct javaParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred261_java)	(struct javaParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct javaParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pjavaParser javaParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pjavaParser javaParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__29      29
#define T__28      28
#define T__27      27
#define T__26      26
#define FloatTypeSuffix      15
#define T__25      25
#define OctalLiteral      10
#define T__24      24
#define EOF      -1
#define Identifier      4
#define T__93      93
#define T__94      94
#define T__91      91
#define T__92      92
#define T__90      90
#define COMMENT      22
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define LINE_COMMENT      23
#define IntegerTypeSuffix      13
#define T__85      85
#define T__84      84
#define T__87      87
#define T__86      86
#define T__89      89
#define T__88      88
#define WS      21
#define T__71      71
#define T__72      72
#define T__70      70
#define FloatingPointLiteral      6
#define JavaIDDigit      20
#define T__76      76
#define T__75      75
#define T__74      74
#define Letter      19
#define EscapeSequence      16
#define T__73      73
#define T__79      79
#define T__78      78
#define T__77      77
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define T__65      65
#define T__62      62
#define T__63      63
#define CharacterLiteral      7
#define Exponent      14
#define T__61      61
#define T__60      60
#define HexDigit      12
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__107      107
#define T__108      108
#define T__109      109
#define T__59      59
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__111      111
#define T__110      110
#define T__113      113
#define T__112      112
#define T__50      50
#define T__42      42
#define HexLiteral      9
#define T__43      43
#define T__40      40
#define T__41      41
#define T__46      46
#define T__47      47
#define T__44      44
#define T__45      45
#define T__48      48
#define T__49      49
#define T__102      102
#define T__101      101
#define T__100      100
#define DecimalLiteral      11
#define StringLiteral      8
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define ENUM      5
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define UnicodeEscape      17
#define OctalEscape      18
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for javaParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
