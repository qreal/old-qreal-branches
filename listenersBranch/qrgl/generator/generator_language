Язык для генераторов.

Требования
	1) Должен поддерживать foreach как у финнов.
	2) Если генераторы будут содержать шаблонные части, то нужна удобная реализация подставки значений в шаблон
	3) Желательно иметь встроенный механизм проверки параметров (к примеру, проверка всех указателей на ненулевость, если происходит их разыменование)
	4) Упрощенная работа с записью в файл. При создании нового шаблона автоматически генерить соответствующий файл и поток.
		Возможно завести класс Шаблон, который упростит все эти взаимодействия.

Предложения по реализации
	Генератор состоит из заданий. Задания занимаются генерацией какой-то цельной логической структуры, к примеру, класса.
	Задания представляют из себя расширенные шаблоны, где под расширением понимаются лексемы разрабатываемого языка, 
	которые в свою очередь разворачиваются в части генерируемого кода. Так транслятор с этого языка будет своего рода 
	подстановочным генератором. Крупные блоки, которые можно переиспользовать, можно выносить в отдельные задания. Результатом работы задания является строка,
	поданная в заданый для задания поток.

	Проблемы с таким подходом
		Задания-шаблоны - генерация лишь в один язык (одну грамматику). Идея заданий-шаблонов хорошо в случае генерации в один язык

	Реализация foreach
		Можно в foreach передавать только список, а к текушему элементу обращаться через некий знак (^) или имя (cur)
