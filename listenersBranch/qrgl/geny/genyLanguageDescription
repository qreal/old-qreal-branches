Каждый файл представляет из себя некое задание, которое на выходе представляется текстом (строкой).
В начале файла указывается название этого задания: Task _name_
Задание представляет из себя шаблон. То, что указывается в ' ' сразу попадает в выходной текст.
Можно вставить текст другого задания: task _name_
Каждая строка в задании (если она непосредственно добавляет символы в выходной текст) представляет
собой строку в выходном тексте.
В каждом блоке есть текущий объект, над которым происходит работа. Так и у самого задания есть такой объект.
В @@ @@ указываются свойства текущего объекта, которые непосредственно попадают в выходную строку.
	(имя метода объекта, иимя поля объекта или property)

withTab - выводит текущий блок с табом на один больше, чем в объемлющем блоке

foreach имеет синтаксис:
	foreach тип_объекта_текущего_для_блока_foreach in в_каком_списке_объекта_содержится 
		если тип_объекта_текущего_для_блока_foreach == "." - для всех объектов в списке
_объект:
	. - текущий объект
	_method_name_  - метод текущего объекта, возвращающий объект, текущий для объявления foreach


Вариант 2:
Отказываемся от кавычек. Теперь все, что особо не помечено отправляется в строку.
Отдельные управляющие строки начинаются на #!, а управляющие конструкции внутри обычных строк выделяются
@@! @@. Таким образом упрощается написание и обработка.
Границы цикла выделяются #!{ и #!}.
Комментарии только однострочные с #!/


- Сохранение текущего объекта в тег
	saveObj
+ нотация toFile
